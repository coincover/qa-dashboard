{"version":3,"file":"static/js/469.c2823e51.chunk.js","mappings":"8HAEA,IAAeA,EAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCACTC,QAAS,CACP,eAAgB,qB,2FCHbC,eAAeC,EAAmBC,GACvC,IAEE,aADkBC,EAAAA,EAAYC,IAAK,2CAA0CF,MAClEG,IACb,CAAE,MAAOC,GACP,OAAOC,oBAAoBD,EAC7B,CACF,CACON,eAAeQ,EAAqBN,GACzC,IAEE,aADkBC,EAAAA,EAAYC,IAAK,+CAA8CF,MACtEG,IACb,CAAE,MAAOC,GACP,OAAOC,oBAAoBD,EAC7B,CACF,C,yGCXA,MAAMG,EAAW,CACf,0BAA2B,CAAEC,GAAI,IAG7BC,GAAWC,EAAAA,EAAAA,aACf,CAAAC,EAeEC,KACI,IAfJ,OACEC,GAAS,EAAI,UACbC,EAAS,SACTC,EAAQ,QACRC,GAAU,EAAI,aACdC,EAAe,GAAE,UACjBC,EAAY,CAAC,EAAC,UACdC,EAAS,UACTC,EAAS,OACTC,EAAM,GACNC,EAAK,CAAC,EAAC,MACPC,KACGC,GACJb,EAGD,MAAMc,GAAQC,EAAAA,EAAAA,KAEd,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHhB,IAAKA,KACDY,EACJF,GAAI,CACFT,OAAQA,EAAS,YAAc,OAC/BgB,YAAaJ,EAAMK,QAAQC,QAAQ,KAAO,GAC1C,SAAU,CACRjB,UAAWA,EAAYO,GAAU,kCAAoC,cAEpEC,GACHP,SAAA,CAGDQ,IAASS,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACX,GAAIf,EAAUgB,MAAOJ,GAAYa,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIpB,SAAEQ,IAAsBA,EAAOa,OAAQhB,IAGrHG,IAASS,EAAAA,EAAAA,KAACK,EAAAA,EAAO,IAGjBrB,IACCgB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAChB,GAAIJ,EAAWqB,UAAWtB,EAAaF,SACjDA,KAGHC,GAAWD,IACR,IAmBb,K,oQCKA,MAlEwBJ,IAAe,IAAd,KAAER,GAAMQ,EAC/B,SAAS6B,EAAaC,GACpB,MAAMC,EAAQD,EAAKE,MAAM,KAEzB,OAAqB,IAAjBD,EAAME,OACD,CACL7B,SAAW,GAAE0B,EAAK,MAGb,CACL1B,SAAW,GAAE2B,EAAM,GAAG,KAAKA,EAAM,GAAG,KAG1C,CAKA,OACEV,EAAAA,EAAAA,KAAA,OAAAjB,UACEiB,EAAAA,EAAAA,KAACa,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAMhC,UAC/BY,EAAAA,EAAAA,MAACqB,EAAAA,EAAK,CAAAjC,SAAA,EACJiB,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAAAlC,UACRY,EAAAA,EAAAA,MAACuB,EAAAA,EAAQ,CAAAnC,SAAA,EACPiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAC,kBACXiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAC,YACXiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAC,YACXiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAC,kBACXiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAC,iBAGfiB,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAAArC,SACH,OAAJZ,QAAI,IAAJA,OAAI,EAAJA,EAAMkD,KAAKC,IAAC,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACX/B,EAAAA,EAAAA,MAACuB,EAAAA,EAAQ,CAAYS,QAASA,KAAMC,OAnBxBC,EAmBuCP,OAlB7DQ,OAAOC,KAAKF,EAAQG,IAAK,UADHH,KAmB0C,EAACI,OAAK,EAACC,MAAO,CAAEC,OAAQ,WAAYpD,SAAA,EACxFiB,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,UACRY,EAAAA,EAAAA,MAACO,EAAAA,EAAU,CAACZ,GAAI,CAAE8C,WAAY,IAAK5D,GAAI,EAAG6D,GAAI,KAAMC,GAAI,KAAOvD,SAAA,EAC7DiB,EAAAA,EAAAA,KAACuC,EAAAA,IAAkB,IAAG,IAAEjB,EAAEkB,IAAI,MAAIlB,EAAE/B,YAGxCS,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SACwB,OAA/BuC,EAAEmB,OAAOC,mBAA6B1C,EAAAA,EAAAA,KAAC2C,EAAAA,IAAe,CAACC,MAAM,aAAe5C,EAAAA,EAAAA,KAAC6C,EAAAA,IAAW,CAACD,MAAM,eAElG5C,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,UACRiB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAO,CAACvD,MAAe,QAAVgC,EAAED,EAAEyB,cAAM,IAAAxB,GAAQ,QAARC,EAARD,EAAUyB,cAAM,IAAAxB,OAAR,EAARA,EAAkBf,KAAK1B,UACrCiB,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,IAAKzC,EAAqB,QAATiB,EAACH,EAAEyB,cAAM,IAAAtB,GAAQ,QAARC,EAARD,EAAUuB,cAAM,IAAAtB,OAAR,EAARA,EAAkBjB,aAG/CT,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,UACRiB,EAAAA,EAAAA,KAAC8C,EAAAA,EAAO,CAACvD,MAAO2D,EAAO5B,EAAE6B,cAAcC,OAAO,2BAA2BrE,SACtEmE,EAAO5B,EAAE6B,cAAcE,QAAQ,QAAQC,eAG5CtD,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAApC,SAAEuC,EAAEyB,OAAOQ,IAAIC,UAAU,EAAG,OAnBzBlC,EAAEmC,GAoBN,YAKf,ECLV,MAvDmB9E,IAAgB,IAAf,MAAEY,GAAOZ,EAC3B,MAAO+E,EAAWC,IAAcC,EAAAA,EAAAA,WAAS,IAClCC,EAAuBC,IAA4BF,EAAAA,EAAAA,UAAS,IAC7DnE,GAAQC,EAAAA,EAAAA,KA6Bd,OAhBAqE,EAAAA,EAAAA,YAAU,KACUjG,WAChB,IACE6F,GAAW,GACX,MAAMK,QAAoBjG,EAAAA,EAAAA,GAfRkG,KACtB,OAAQA,GACN,IAAK,mDACH,MAAO,4BACT,IAAK,iDACH,MAAO,0BACT,QACE,OAAOA,EACX,EAOiDC,CAAe3E,IAC5DuE,EAAyBE,EAC3B,CAAE,MAAO5F,GACP+F,QAAQ/F,MAAM,uBAAwBA,EACxC,CAAC,QACCuF,GAAW,EACb,GAGFS,EAAW,GACV,CAAC7E,KAGFS,EAAAA,EAAAA,KAACvB,EAAAA,EAAQ,CAACc,MAAOA,EAAOD,GAAI,CAAER,UAAWW,EAAM4E,QAAQ,IAAKtF,UAC1DiB,EAAAA,EAAAA,KAACsE,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,EAAY1F,UACnCiB,EAAAA,EAAAA,KAACsE,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAG5F,UAChBiB,EAAAA,EAAAA,KAACsE,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,EAAY1F,UACnCiB,EAAAA,EAAAA,KAACsE,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG/F,SACvC2E,IAAcG,GAA0D,IAAjCA,EAAsBjD,QAC5DZ,EAAAA,EAAAA,KAAA,OAAAjB,SAAK,gBAELiB,EAAAA,EAAAA,KAAC+E,EAAe,CAAC5G,KAAM0F,EAAsBmB,wBAM9C,C","sources":["api/Common.js","api/SonarCloudAPI.js","components/Cards/MainCard.js","components/Tables/SonarCloudTable.js","pages/SonarCloud.js"],"sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://qa-dashboard-4gfp.onrender.com',\n  headers: {\n    'Content-type': 'application/json'\n  }\n});\n","import commonAxios from './Common';\n\nexport async function getPullRequestData(project) {\n  try {\n    const req = await commonAxios.get(`/api/project_pull_requests/list?project=${project}`);\n    return req.data;\n  } catch (error) {\n    return generateErrorReturn(error);\n  }\n}\nexport async function getProjectStatusData(project) {\n  try {\n    const req = await commonAxios.get(`/api/qualitygates/project_status?projectKey=${project}`);\n    return req.data;\n  } catch (error) {\n    return generateErrorReturn(error);\n  }\n}\n","import { forwardRef } from 'react';\n\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\n\nconst headerSX = {\n  '& .MuiCardHeader-action': { mr: 0 }\n};\n\nconst MainCard = forwardRef(\n  (\n    {\n      border = true,\n      boxShadow,\n      children,\n      content = true,\n      contentClass = '',\n      contentSX = {},\n      darkTitle,\n      secondary,\n      shadow,\n      sx = {},\n      title,\n      ...others\n    },\n    ref\n  ) => {\n    const theme = useTheme();\n\n    return (\n      <Card\n        ref={ref}\n        {...others}\n        sx={{\n          border: border ? '1px solid' : 'none',\n          borderColor: theme.palette.primary[200] + 25,\n          ':hover': {\n            boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\n          },\n          ...sx\n        }}\n      >\n        {/* card header and action */}\n        {title && <CardHeader sx={headerSX} title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title} action={secondary} />}\n\n        {/* content & header divider */}\n        {title && <Divider />}\n\n        {/* card content */}\n        {content && (\n          <CardContent sx={contentSX} className={contentClass}>\n            {children}\n          </CardContent>\n        )}\n        {!content && children}\n      </Card>\n    );\n  }\n);\n\nMainCard.propTypes = {\n  border: PropTypes.bool,\n  boxShadow: PropTypes.bool,\n  children: PropTypes.node,\n  content: PropTypes.bool,\n  contentClass: PropTypes.string,\n  contentSX: PropTypes.object,\n  darkTitle: PropTypes.bool,\n  secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n  shadow: PropTypes.string,\n  sx: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import React from 'react';\n\nimport { Avatar, Tooltip, Typography } from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { IconGitPullRequest, IconSquareCheck, IconSquareX } from '@tabler/icons';\nimport * as moment from 'moment';\nimport PropTypes from 'prop-types';\n\nconst SonarCloudTable = ({ data }) => {\n  function stringAvatar(name) {\n    const words = name.split(' ');\n\n    if (words.length === 1) {\n      return {\n        children: `${name[0]}`\n      };\n    } else {\n      return {\n        children: `${words[0][0]}${words[1][0]}`\n      };\n    }\n  }\n  const handleRowClick = (rowData) => {\n    window.open(rowData.url, '_blank');\n  };\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Pull Request</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Author</TableCell>\n              <TableCell>Checked Date</TableCell>\n              <TableCell>Commit</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.map((d) => (\n              <TableRow key={d.id} onClick={() => handleRowClick(d)} hover style={{ cursor: 'pointer' }}>\n                <TableCell>\n                  <Typography sx={{ fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>\n                    <IconGitPullRequest /> {d.key} - {d.title}\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  {d.status.qualityGateStatus === 'OK' ? <IconSquareCheck color=\"#7bc62d\" /> : <IconSquareX color=\"#ff4500\" />}\n                </TableCell>\n                <TableCell>\n                  <Tooltip title={d.commit?.author?.name}>\n                    <Avatar {...stringAvatar(d.commit?.author?.name)} />\n                  </Tooltip>\n                </TableCell>\n                <TableCell>\n                  <Tooltip title={moment(d.analysisDate).format('MMMM Do YYYY, h:mm:ss a')}>\n                    {moment(d.analysisDate).startOf('hour').fromNow()}\n                  </Tooltip>\n                </TableCell>\n                <TableCell>{d.commit.sha.substring(0, 7)}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nSonarCloudTable.propTypes = {\n  data: PropTypes.array\n};\n\nexport default SonarCloudTable;\n","import { useEffect, useState } from 'react';\n\nimport { Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\n\nimport MainCard from 'components/Cards/MainCard';\nimport { gridSpacing } from 'store/constant';\n\nimport { getPullRequestData } from '../api/SonarCloudAPI';\nimport SonarCloudTable from '../components/Tables/SonarCloudTable';\n\nconst SonarCloud = ({ title }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [sonarCloudPullRequest, setSonarCloudPullRequest] = useState([]);\n  const theme = useTheme();\n\n  const projectToValue = (value) => {\n    switch (value) {\n      case 'List of Pull Request Results for coincover-b2b2c':\n        return 'coincover_coincover-b2b2c';\n      case 'List of Pull Request Results for coincover-txm':\n        return 'coincover_coincover-txm';\n      default:\n        return value;\n    }\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const pullRequest = await getPullRequestData(projectToValue(title));\n        setSonarCloudPullRequest(pullRequest);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [title]);\n\n  return (\n    <MainCard title={title} sx={{ boxShadow: theme.shadows[6] }}>\n      <Grid container spacing={gridSpacing}>\n        <Grid item xs={12}>\n          <Grid container spacing={gridSpacing}>\n            <Grid item xs={12} sm={12} md={12} lg={12}>\n              {isLoading || !sonarCloudPullRequest || sonarCloudPullRequest.length === 0 ? (\n                <div>Loading...</div>\n              ) : (\n                <SonarCloudTable data={sonarCloudPullRequest.pullRequests} />\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </MainCard>\n  );\n};\n\nSonarCloud.propTypes = {\n  title: PropTypes.string\n};\n\nexport default SonarCloud;\n"],"names":["axios","create","baseURL","headers","async","getPullRequestData","project","commonAxios","get","data","error","generateErrorReturn","getProjectStatusData","headerSX","mr","MainCard","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","stringAvatar","name","words","split","length","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","d","_d$commit","_d$commit$author","_d$commit2","_d$commit2$author","onClick","handleRowClick","rowData","window","open","url","hover","style","cursor","fontWeight","mt","mb","IconGitPullRequest","key","status","qualityGateStatus","IconSquareCheck","color","IconSquareX","Tooltip","commit","author","Avatar","moment","analysisDate","format","startOf","fromNow","sha","substring","id","isLoading","setLoading","useState","sonarCloudPullRequest","setSonarCloudPullRequest","useEffect","pullRequest","value","projectToValue","console","fetchData","shadows","Grid","container","spacing","gridSpacing","item","xs","sm","md","lg","SonarCloudTable","pullRequests"],"sourceRoot":""}