{"version":3,"file":"static/js/385.a49e429c.chunk.js","mappings":"8HAEAA,QAAQC,IAAI,WAAYC,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,mBACpCH,QAAQC,IAAI,oBAAqBC,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYE,SAC7C,IAAeC,EAAAA,EAAMC,OAAO,CAC1BC,QAAS,yCACTC,QAAS,CACP,eAAgB,mBAChB,UAAWN,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,oB,yGCF3B,MAAMM,EAAW,CACf,0BAA2B,CAAEC,GAAI,IAG7BC,GAAWC,EAAAA,EAAAA,aACf,CAAAC,EAeEC,KACI,IAfJ,OACEC,GAAS,EAAI,UACbC,EAAS,SACTC,EAAQ,QACRC,GAAU,EAAI,aACdC,EAAe,GAAE,UACjBC,EAAY,CAAC,EAAC,UACdC,EAAS,UACTC,EAAS,OACTC,EAAM,GACNC,EAAK,CAAC,EAAC,MACPC,KACGC,GACJb,EAGD,MAAMc,GAAQC,EAAAA,EAAAA,KAEd,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHhB,IAAKA,KACDY,EACJF,GAAI,CACFT,OAAQA,EAAS,YAAc,OAC/BgB,YAAaJ,EAAMK,QAAQC,QAAQ,KAAO,GAC1C,SAAU,CACRjB,UAAWA,EAAYO,GAAU,kCAAoC,cAEpEC,GACHP,SAAA,CAGDQ,IAASS,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACX,GAAIf,EAAUgB,MAAOJ,GAAYa,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIpB,SAAEQ,IAAsBA,EAAOa,OAAQhB,IAGrHG,IAASS,EAAAA,EAAAA,KAACK,EAAAA,EAAO,IAGjBrB,IACCgB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAChB,GAAIJ,EAAWqB,UAAWtB,EAAaF,SACjDA,KAGHC,GAAWD,IACR,IAmBb,K,oQCAA,MApEkBJ,IAAe,IAAd,KAAE6B,GAAM7B,EAKzB,OACEqB,EAAAA,EAAAA,KAAA,OAAAjB,UACEiB,EAAAA,EAAAA,KAACS,EAAAA,EAAc,CAACC,UAAWC,EAAAA,EAAM5B,UAC/BY,EAAAA,EAAAA,MAACiB,EAAAA,EAAK,CAAA7B,SAAA,EACJiB,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAAA9B,UACRY,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAAA/B,SAAA,EACPiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,iBACXiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,aACXiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,YACXiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,cACXiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,aACXiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAC,uBAGfiB,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CAAAjC,SACH,OAAJyB,QAAI,IAAJA,OAAI,EAAJA,EAAMS,KAAKC,IAAC,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OACX7B,EAAAA,EAAAA,MAACmB,EAAAA,EAAQ,CAEPW,QAASA,KAAMC,OAtBLC,EAsBoBT,OArB1CU,OAAOC,KAAM,0CAAyCF,EAAQG,MAAO,UAD/CH,KAsBuB,EACjCI,OAAK,EACLC,MAAO,CAAEC,OAAQ,WAAalD,SAAA,EAE9BiB,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,UACRiB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACZ,GAAI,CAAE4C,WAAY,IAAK1D,GAAI,EAAG2D,GAAI,KAAMC,GAAI,KAAOrD,SAAEmC,EAAEY,SAErE9B,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,SAAEmC,EAAEmB,OAAOC,WACrBtC,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,UACRiB,EAAAA,EAAAA,KAACuC,EAAAA,EAAI,CACHpC,QAAQ,WACRqC,MAAM,YACNC,MAAOvB,EAAEmB,OAAOK,OAAOC,KACvBrD,GAAI,CAAEsD,aAAc,MAAOC,MAAO,QAClCC,KAAK,aAGT9C,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,UACRiB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,CAACxD,OAAe,QAAR4B,EAAAD,EAAEmB,cAAM,IAAAlB,GAAU,QAAVC,EAARD,EAAU6B,gBAAQ,IAAA5B,OAAV,EAARA,EAAoB6B,cAAe,eAAelE,UAChEiB,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CAACC,IAAa,QAAV9B,EAAEH,EAAEmB,cAAM,IAAAhB,GAAU,QAAVC,EAARD,EAAU2B,gBAAQ,IAAA1B,OAAV,EAARA,EAAoB2B,YAAaG,IAAa,QAAV7B,EAAEL,EAAEmB,cAAM,IAAAd,GAAU,QAAVC,EAARD,EAAUyB,gBAAQ,IAAAxB,OAAV,EAARA,EAAoB6B,WAAW,gBAGtFrD,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,UACRiB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,CAACxD,MAAO+D,EAAOpC,EAAEmB,OAAOkB,SAASC,OAAO,2BAA2BzE,SACxEuE,EAAOpC,EAAEmB,OAAOkB,SAASE,QAAQ,QAAQC,eAG9C1D,EAAAA,EAAAA,KAACe,EAAAA,EAAS,CAAAhC,UACRiB,EAAAA,EAAAA,KAAC+C,EAAAA,EAAO,CAACxD,MAAO+D,EAAOpC,EAAEmB,OAAOsB,SAASH,OAAO,2BAA2BzE,SACxEuE,EAAOpC,EAAEmB,OAAOsB,SAASF,QAAQ,QAAQC,gBA9BzCxC,EAAE0C,GAiCE,YAKf,E,mBCsBV,MAzEiBjF,IAAgB,IAADkF,EAAA,IAAd,MAAEtE,GAAOZ,EACzB,MAAMmF,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1BC,GAAiBF,EAAAA,EAAAA,IAAYG,EAAAA,IAC7BC,GAAmBJ,EAAAA,EAAAA,IAAYK,EAAAA,KAE9BC,EAAKC,IAAUC,EAAAA,EAAAA,UAAST,IACxBU,EAAQC,IAAaF,EAAAA,EAAAA,UAASN,IAC9BS,EAAUC,IAAeJ,EAAAA,EAAAA,UAASJ,GAEnCS,GAAWC,EAAAA,EAAAA,OACVC,EAAWC,IAAcR,EAAAA,EAAAA,WAAS,IAElC/D,EAAMwE,IAAWT,EAAAA,EAAAA,UAAS,IAC3B9E,GAAQC,EAAAA,EAAAA,KAiCd,OA/BAuF,EAAAA,EAAAA,YAAU,KACUC,WAChB,IACEH,GAAW,GAENjB,GAAsC,IAAvBA,EAAYqB,QAC9Bb,QAAaM,GAASQ,EAAAA,EAAAA,GAAiB,SAEpCnB,GAA4C,IAA1BA,EAAekB,QACpCV,QAAgBG,GAASQ,EAAAA,EAAAA,GAAiB,qBAGvCjB,GAAgD,IAA5BA,EAAiBgB,QACxCR,QAAkBC,GAASQ,EAAAA,EAAAA,GAAiB,mBAEhD,CAAE,MAAOC,GACPvH,QAAQuH,MAAM,uBAAwBA,EACxC,CAAC,QACCN,GAAW,EACb,GAGFO,EAAW,GACV,CAACV,EAAUd,EAAaG,EAAgBE,KAE3Cc,EAAAA,EAAAA,YAAU,KACM,SAAV1F,GAAkByF,EAAQX,GAAO,IACvB,YAAV9E,GAAqByF,EAAQR,GAAU,IAC7B,cAAVjF,GAAuByF,EAAQN,GAAY,GAAG,GACjD,CAACL,EAAKG,EAAQE,EAAUnF,KAGzBS,EAAAA,EAAAA,KAAAuF,EAAAA,SAAA,CAAAxG,UACO,OAAJyB,QAAI,IAAJA,GAAY,QAARqD,EAAJrD,EAAMgF,cAAM,IAAA3B,OAAR,EAAJA,EAAcsB,QAAS,GACtBnF,EAAAA,EAAAA,KAACvB,EAAAA,EAAQ,CAACc,MAAQ,gBAAeA,WAAgBD,GAAI,CAAER,UAAWW,EAAMgG,QAAQ,IAAK1G,UACnFiB,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,EAAY9G,UACnCiB,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAGhH,UAChBiB,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACC,WAAS,EAACC,QAASC,EAAAA,EAAY9G,UACnCiB,EAAAA,EAAAA,KAAC0F,EAAAA,GAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAGnH,SACvC+F,GAAY9E,EAAAA,EAAAA,KAAA,OAAAjB,SAAK,gBAAmBiB,EAAAA,EAAAA,KAACmG,EAAS,CAAC3F,KAAMA,EAAKgF,oBAOrExF,EAAAA,EAAAA,KAACvB,EAAAA,EAAQ,CAACa,GAAI,CAAER,UAAWW,EAAMgG,QAAQ,IAAK1G,UAC5CiB,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACZ,GAAI,CAAE8G,UAAW,UAAWrH,SAAC,eAG5C,C,iFC7EA,MAAMqG,EAAoBiB,GAAcnB,MAAON,EAAU0B,KAC9D,MAAMC,EAAWD,IAAWE,YAAYH,GAExC,IAAKE,GAAgC,IAApBA,EAASpB,OACxB,IACE,MAAMsB,QCPLvB,eAAuBmB,GAC5B,IAEE,aADkBK,EAAAA,EAAYC,IAAK,oDAAmDN,gCAC3E7F,IACb,CAAE,MAAO6E,GAEP,MADAvH,QAAQuH,MAAM,4BAA6BA,GACrCA,CACR,CACF,CDDwBuB,CAAQP,GAQ1B,OAPAzB,EAAS,CACPiC,KAAMC,EAAAA,GACNC,QAAS,CACPV,YACA7F,KAAMiG,KAGHA,CACT,CAAE,MAAOO,GAEP,MADAlJ,QAAQuH,MAAM,8BAA+B2B,GACvCA,CACR,CAGF,OAAOT,CAAQ,C,sKEtBjB,MAAMU,EAAuBC,GAAUA,EAAMV,YACvCW,EAAuBD,GAAUA,EAAME,YACvCC,EAAsBH,GAAUA,EAAMI,WAE/BtD,GAAiBuD,EAAAA,EAAAA,IAAe,CAACN,IAAuBT,GAAgBA,EAAYgB,UACpFtD,GAAoBqD,EAAAA,EAAAA,IAAe,CAACN,IAAuBT,GAAgBA,EAAYiB,aACvFrD,GAAsBmD,EAAAA,EAAAA,IAAe,CAACN,IAAuBT,GAAgBA,EAAYkB,eAEzFC,EAAsBtB,IAAckB,EAAAA,EAAAA,IAAe,CAACJ,IAAuBC,GAAgBA,EAAYf,KACvGuB,EAAqBvB,IAAckB,EAAAA,EAAAA,IAAe,CAACF,IAAsBC,GAAeA,EAAWjB,I","sources":["api/Common.js","components/Cards/MainCard.js","components/Tables/JiraTable.js","pages/Jira.js","store/jira.js","api/JiraAPI.js","store/selectors.js"],"sourcesContent":["import axios from 'axios';\n\nconsole.log('API Key:', process.env.REACT_APP_API_KEY); // For debugging purposes\nconsole.log('SONAR_CLOUD Key: ', process.env.API_KEY); // For debugging purposes\nexport default axios.create({\n  baseURL: 'https://qa-dashboard-4gfp.onrender.com',\n  headers: {\n    'Content-type': 'application/json',\n    'API-Key': process.env.REACT_APP_API_KEY\n  }\n});\n","import { forwardRef } from 'react';\n\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\n\nconst headerSX = {\n  '& .MuiCardHeader-action': { mr: 0 }\n};\n\nconst MainCard = forwardRef(\n  (\n    {\n      border = true,\n      boxShadow,\n      children,\n      content = true,\n      contentClass = '',\n      contentSX = {},\n      darkTitle,\n      secondary,\n      shadow,\n      sx = {},\n      title,\n      ...others\n    },\n    ref\n  ) => {\n    const theme = useTheme();\n\n    return (\n      <Card\n        ref={ref}\n        {...others}\n        sx={{\n          border: border ? '1px solid' : 'none',\n          borderColor: theme.palette.primary[200] + 25,\n          ':hover': {\n            boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\n          },\n          ...sx\n        }}\n      >\n        {/* card header and action */}\n        {title && <CardHeader sx={headerSX} title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title} action={secondary} />}\n\n        {/* content & header divider */}\n        {title && <Divider />}\n\n        {/* card content */}\n        {content && (\n          <CardContent sx={contentSX} className={contentClass}>\n            {children}\n          </CardContent>\n        )}\n        {!content && children}\n      </Card>\n    );\n  }\n);\n\nMainCard.propTypes = {\n  border: PropTypes.bool,\n  boxShadow: PropTypes.bool,\n  children: PropTypes.node,\n  content: PropTypes.bool,\n  contentClass: PropTypes.string,\n  contentSX: PropTypes.object,\n  darkTitle: PropTypes.bool,\n  secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n  shadow: PropTypes.string,\n  sx: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import React from 'react';\n\nimport { Avatar, Chip, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip, Typography } from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport * as moment from 'moment';\nimport PropTypes from 'prop-types';\n\nconst JiraTable = ({ data }) => {\n  const handleRowClick = (rowData) => {\n    window.open(`https://coincover.atlassian.net/browse/${rowData.key}`, '_blank');\n  };\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Jira Number</TableCell>\n              <TableCell>Summary</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Assignee</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Last Updated</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data?.map((d) => (\n              <TableRow\n                key={d.id}\n                onClick={() => handleRowClick(d)}\n                hover // Add hover property for hover effect\n                style={{ cursor: 'pointer' }} // Change cursor on hover\n              >\n                <TableCell>\n                  <Typography sx={{ fontWeight: 500, mr: 1, mt: 1.75, mb: 0.75 }}>{d.key}</Typography>\n                </TableCell>\n                <TableCell>{d.fields.summary}</TableCell>\n                <TableCell>\n                  <Chip\n                    variant=\"combined\"\n                    color=\"secondary\"\n                    label={d.fields.status.name}\n                    sx={{ borderRadius: '5px', width: '100%' }}\n                    size=\"large\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <Tooltip title={d.fields?.assignee?.displayName || 'Not assigned'}>\n                    <Avatar alt={d.fields?.assignee?.displayName} src={d.fields?.assignee?.avatarUrls['48x48']} />\n                  </Tooltip>\n                </TableCell>\n                <TableCell>\n                  <Tooltip title={moment(d.fields.created).format('MMMM Do YYYY, h:mm:ss a')}>\n                    {moment(d.fields.created).startOf('hour').fromNow()}\n                  </Tooltip>\n                </TableCell>\n                <TableCell>\n                  <Tooltip title={moment(d.fields.updated).format('MMMM Do YYYY, h:mm:ss a')}>\n                    {moment(d.fields.updated).startOf('hour').fromNow()}\n                  </Tooltip>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nJiraTable.propTypes = {\n  data: PropTypes.array\n};\n\nexport default JiraTable;\n","// material-ui\nimport { useEffect, useState } from 'react';\n\nimport { Grid, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// project imports\nimport MainCard from 'components/Cards/MainCard';\nimport { gridSpacing } from 'store/constant';\n\nimport JiraTable from '../components/Tables/JiraTable';\nimport { retrieveJiraData } from '../store/jira';\nimport { getJiraBugData, getJiraDefectData, getJiraSecurityData } from '../store/selectors';\n\nconst Products = ({ title }) => {\n  const jiraBugData = useSelector(getJiraBugData);\n  const jiraDefectData = useSelector(getJiraDefectData);\n  const jiraSecurityData = useSelector(getJiraSecurityData);\n\n  const [bug, setBug] = useState(jiraBugData);\n  const [defect, setDefect] = useState(jiraDefectData);\n  const [security, setSecurity] = useState(jiraSecurityData);\n\n  const dispatch = useDispatch();\n  const [isLoading, setLoading] = useState(true);\n\n  const [data, setData] = useState([]);\n  const theme = useTheme();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n\n        if (!jiraBugData || jiraBugData.length === 0) {\n          setBug(await dispatch(retrieveJiraData('bug')));\n        }\n        if (!jiraDefectData || jiraDefectData.length === 0) {\n          setDefect(await dispatch(retrieveJiraData('customer defect')));\n        }\n\n        if (!jiraSecurityData || jiraSecurityData.length === 0) {\n          setSecurity(await dispatch(retrieveJiraData('security issue')));\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [dispatch, jiraBugData, jiraDefectData, jiraSecurityData]);\n\n  useEffect(() => {\n    if (title === 'Bugs') setData(bug || []);\n    if (title === 'Defects') setData(defect || []);\n    if (title === 'Securitys') setData(security || []);\n  }, [bug, defect, security, title]);\n\n  return (\n    <>\n      {data?.issues?.length > 0 ? (\n        <MainCard title={`List of Open ${title} issues`} sx={{ boxShadow: theme.shadows[6] }}>\n          <Grid container spacing={gridSpacing}>\n            <Grid item xs={12}>\n              <Grid container spacing={gridSpacing}>\n                <Grid item xs={12} sm={12} md={12} lg={12}>\n                  {isLoading ? <div>Loading...</div> : <JiraTable data={data.issues} />}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </MainCard>\n      ) : (\n        <MainCard sx={{ boxShadow: theme.shadows[6] }}>\n          <Typography sx={{ textAlign: 'center' }}>No Data</Typography>\n        </MainCard>\n      )}\n    </>\n  );\n};\n\nProducts.propTypes = {\n  title: PropTypes.string\n};\n\nexport default Products;\n","import { getJira } from 'api/JiraAPI';\n\nimport { GET_JIRA } from './actions';\n\nexport const retrieveJiraData = (issueType) => async (dispatch, getState) => {\n  const jiraData = getState().jiraReducer[issueType];\n\n  if (!jiraData || jiraData.length === 0) {\n    try {\n      const res = await getJira(issueType);\n      dispatch({\n        type: GET_JIRA,\n        payload: {\n          issueType,\n          data: res\n        }\n      });\n      return res;\n    } catch (err) {\n      console.error('Error retrieving Jira data:', err);\n      throw err;\n    }\n  }\n\n  return jiraData;\n};\n","import commonAxios from './Common';\n\nexport async function getJira(issueType) {\n  try {\n    const req = await commonAxios.get(`/rest/api/2/search?jql=project=PRODENG AND type=\"${issueType}\" AND status not in (Done)`);\n    return req.data;\n  } catch (error) {\n    console.error('Error fetching Jira data:', error);\n    throw error;\n  }\n}\n","import { createSelector } from 'reselect';\n\nconst jiraReducerSelector = (state) => state.jiraReducer;\nconst unitReducerSelector = (state) => state.unitReducer;\nconst e2eReducerSelector = (state) => state.e2eReducer;\n\nexport const getJiraBugData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.bugData);\nexport const getJiraDefectData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.defectData);\nexport const getJiraSecurityData = createSelector([jiraReducerSelector], (jiraReducer) => jiraReducer.securityData);\n\nexport const getProductUnitData = (issueType) => createSelector([unitReducerSelector], (unitReducer) => unitReducer[issueType]);\nexport const getProductE2EData = (issueType) => createSelector([e2eReducerSelector], (e2eReducer) => e2eReducer[issueType]);\n"],"names":["console","log","process","REACT_APP_API_KEY","API_KEY","axios","create","baseURL","headers","headerSX","mr","MainCard","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","data","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","d","_d$fields","_d$fields$assignee","_d$fields2","_d$fields2$assignee","_d$fields3","_d$fields3$assignee","onClick","handleRowClick","rowData","window","open","key","hover","style","cursor","fontWeight","mt","mb","fields","summary","Chip","color","label","status","name","borderRadius","width","size","Tooltip","assignee","displayName","Avatar","alt","src","avatarUrls","moment","created","format","startOf","fromNow","updated","id","_data$issues","jiraBugData","useSelector","getJiraBugData","jiraDefectData","getJiraDefectData","jiraSecurityData","getJiraSecurityData","bug","setBug","useState","defect","setDefect","security","setSecurity","dispatch","useDispatch","isLoading","setLoading","setData","useEffect","async","length","retrieveJiraData","error","fetchData","_Fragment","issues","shadows","Grid","container","spacing","gridSpacing","item","xs","sm","md","lg","JiraTable","textAlign","issueType","getState","jiraData","jiraReducer","res","commonAxios","get","getJira","type","GET_JIRA","payload","err","jiraReducerSelector","state","unitReducerSelector","unitReducer","e2eReducerSelector","e2eReducer","createSelector","bugData","defectData","securityData","getProductUnitData","getProductE2EData"],"sourceRoot":""}